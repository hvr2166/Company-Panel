<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage Purchase </title>
    <!-- Styles -->
    <link rel="stylesheet" href="style.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
</head>
<body>
    <div id="dynamic-content">
 <div  id="manageusers-page"  class="container-wrapper">

        <!-- Main Content -->
        <main class="content">
            <div class="container">
                <h2>Manage Purchase </h2>

              

                <!-- Purchase Table -->
                <div id="pTableView" class="table-container">

                    <div style="display: flex; gap: 15px; margin-bottom: 15px;">
                        <form id="excelUploadForm" action="/uploadpurchasefile" method="POST" enctype="multipart/form-data">
                            <label for="excelFile">Upload Excel File:</label>
                            <input  type="file" name="excelFile" accept=".xlsx" required>
                            <button type="submit" class="btn btn-success">Upload</button>
                          </form>
                          
                          
                    
                        <form action="/downloadsamplepurchase" method="GET">
                            <button type="submit" class="btn btn-primary">Download Sample Excel</button>
                        </form>
                    </div>

                    <div class="filter-container" style="display: flex; align-items: center; gap: 10px; margin-bottom: 10px;">
                        <label for="accountFilter">Supplier</label>
                        <select id="accountFilter" class="form-control">
                            <option value="">Select Supplier</option>
                            <% names.forEach(function(name) { %>
                                <option value="<%= name.sup_name %>"><%=  name.sup_name %></option>
                            <% }); %>
                        </select>
                           
                        </select>
                        <label for="dateFrom" style="font-weight: bold;">Date From</label>
                        <input type="date" id="dateFrom" class="form-control" style="padding: 5px; border: 1px solid #ccc; border-radius: 4px;">
                        
                        <label for="dateUpto" style="font-weight: bold;">Date Upto</label>
                        <input type="date" id="dateUpto" class="form-control" style="padding: 5px; border: 1px solid #ccc; border-radius: 4px;">
                        
                        <button id="searchBtn" class="btn btn-primary" style="background-color: #007bff; color: white; border: none; padding: 6px 12px; border-radius: 4px; cursor: pointer;">
                            Search
                        </button>
                        
                        <button id="resetBtn" class="btn btn-warning" style="background-color: #ffc107; color: black; border: none; padding: 6px 12px; border-radius: 4px; cursor: pointer;">
                            Reset
                        </button>
                    </div>

                    <button id="exportPurchaseExcel" class="btn btn-success" style="margin-bottom: 10px;">Export to Excel</button>

                
                    <br>
                
                    <button id="addPBtn" class="btn btn-primary">Add Purchase </button>
                  <br><br>
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Supplier</th>
                                <th>Purchase Date</th>
                                <th>Due date</th>
                                <th>Nett Amount</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                        <% users.forEach(user => { %>
                            <tr>
                                <td class="sup_name"><%= user.supplier_name %></td>
                                <td class="purchase_date"><%= user.purchase_date %></td>
                                <td class="due_date"><%= user.due_date %></td>
                                <td class="net_total_amt"><%= user.net_total_amt %></td>
                                <td>
                                    <div class="actions">
                                        <!-- Edit Button -->
                                        
                                        <button type="button" class="btn btn-warning edit-purchase" data-id="<%= user.nid %>">
                                            <i class="fa-regular fa-pen-to-square"></i>
                                        </button>
                            

                                            <button type="button" class="btn btn-warning payment-purchase" data-id="<%= user.nid %>">
                                                <i class="fa-regular fa-money-bill-1"></i>
                                            </button>

                                            <button type="button" class="btn btn-warning print-purchase" data-id="<%= user.nid %>">
                                                <i class="fa-solid fa-print"></i>
                                            </button>

                                            <button type="button" class="btn btn-warning details-purchase" data-id="<%= user.nid %>">
                                                <i class="fa-solid fa-magnifying-glass"></i>
                                            </button>
                                    </div>
                                </td>
                                
                                
                                
                            </tr>
                        <% }); %>
                    </tbody>
                    </table>
                    <div id="pagination" class="pagination">
                        <button id="prevPage" class="btn btn-secondary">Previous</button>
                        <span id="pageInfo"></span>
                        <button id="nextPage" class="btn btn-secondary">Next</button>
                    </div>
                </div>
            
               <!-- Add puchase   Form -->
               <div id="addpView" style="display: none;">
                <h3 style="margin-bottom: 20px; font-size: 20px; font-weight: bold;">Manage Purchase</h3>
                <form action="/addpurchase" method="POST">
                    <input type="hidden" name="purchase_id" id="purchase_id" value="">
                    <!-- Supplier Selection -->
                    <div class="form-group" style="display: flex; align-items: center; gap: 10px; margin-bottom: 15px;">
                        <label style="width: 120px;">Supplier</label>
                        <select name="supplier" class="form-control" required style="flex: 1; padding: 8px; border: 1px solid #ccc; border-radius: 5px;">
                            <option value="">Select Supplier</option>
                            <% names.forEach(function(name) { %>
                                <option value="<%= name.nid %>"><%= name.sup_name %></option>
                            <% }); %>
                        </select>   
                         <button type="button" id="addsupplier" style="padding: 8px 15px; background: #6c5ce7; color: white; border: none; border-radius: 5px; cursor: pointer;">Add</button>
                        <label style="width: 120px;">Purchase Date</label>
                        <input type="date" name="purchase_date" class="form-control" required style="flex: 1; padding: 8px; border: 1px solid #ccc; border-radius: 5px;">
                        <label style="width: 120px;">Due Date</label>
                        <input type="date" name="due_date" class="form-control" required style="flex: 1; padding: 8px; border: 1px solid #ccc; border-radius: 5px;">
                    </div>
            
                    <!-- Item Details Container -->
                    <div id="itemDetailsContainer" style="border: 1px solid #ddd; padding: 15px; border-radius: 5px; margin-bottom: 15px;">
                        <label style="font-weight: bold;">Item Details</label>
                        <div class="item-details" style="display: flex; flex-wrap: wrap; gap: 10px; align-items: center;">
                            <div class="form-group" style="flex: 1;">
                                <label>Lot No</label>
                                <select name="item[0][lot_no]" class="form-control" required style="width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 5px;">
                                    <option value="">Select Lot No</option>
                                    <% lots.forEach(function(lot) { %>
                                        <option value="<%= lot.lot %>"><%= lot.lot %></option>
                                    <% }); %>
                                </select>
                            </div>
                            <div class="form-group" style="flex: 2;">
                                <label>Description</label>
                                <input type="text" name="item[0][description]" class="form-control" required style="width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 5px;">
                            </div>
                            <div class="form-group" style="flex: 1;">
                                <label>Weight Unit</label>
                                <input 
                                    type="text" 
                                    name="item[0][weight_unit]" 
                                    class="form-control" 
                                    value="carat" 
                                    readonly 
                                    style="width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 5px;"
                                >
                            </div>
                            
                            <div class="form-group" style="flex: 1;">
                                <label>Weight</label>
                                <input type="text" name="item[0][weight]" class="form-control" required style="width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 5px;">
                            </div>
                            <div class="form-group" style="flex: 1;">
                                <label>Pieces</label>
                                <input type="number" id="pieces" name="item[0][pcs]" class="form-control" required style="width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 5px;">
                            </div>
                            <div class="form-group" style="flex: 1;">
                                <label>Price</label>
                                <input type="number" id="price" name="item[0][price]" class="form-control" required style="width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 5px;">
                            </div>
                            <div class="form-group" style="flex: 1;">
                                <label>Tax</label>
                                <input type="number" id="tax"  name="item[0][tax]" class="form-control" required style="width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 5px;">
                            </div>
                            <div class="form-group" style="flex: 1;">
                                <label>Net Amount</label>
                                <input type="number"  id="net_amount" name="item[0][netamount]" class="form-control" required style="width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 5px;">
                            </div>
                        </div>
                    </div>
            
                    <!-- Add More Button -->
                    <button type="button" id="addMoreBtn" style="margin-bottom: 15px; padding: 8px 12px; background: #ccc; border: none; border-radius: 5px; cursor: pointer;">+ Add More</button>
            
                    <!-- Sales Person Dropdown -->
                    <div style="display: flex; flex-wrap: wrap; gap: 10px; margin-top: 10px;">

                        <div style="flex: 1; min-width: 150px;">
                            <label for="additional_charges" style="font-weight: 500; display: block; margin-bottom: 5px;">Additional Charges</label>
                            <input type="number" id="additional_charges" name="additional_charges" value="0"
                                style="width: 100%; padding: 8px; border: 1px solid #ced4da; border-radius: 5px; outline: none;">
                        </div>
                    
                        <div style="flex: 1; min-width: 150px;">
                            <label for="discount_percent" style="font-weight: 500; display: block; margin-bottom: 5px;">Discount Percent</label>
                            <input type="number" id="discount_percent" name="discount_percent" value="0"
                                style="width: 100%; padding: 8px; border: 1px solid #ced4da; border-radius: 5px; outline: none;">
                        </div>
                    
                                                <div style="flex: 1; min-width: 150px;">
                            <label for="discount_amount" style="font-weight: 500; display: block; margin-bottom: 5px;">Discount Amount</label>
                            <input type="number" id="discount_amount" name="discount_amount" value="0"
                                style="width: 100%; padding: 8px; border: 1px solid #ced4da; border-radius: 5px; outline: none;">
                        </div>
                    
                        <div style="flex: 1; min-width: 150px;">
                            <label for="exchange_rate" style="font-weight: 500; display: block; margin-bottom: 5px;">Exchange Rate</label>
                            <input type="number" id="exchange_rate" name="exchange_rate" value="0"
                                style="width: 100%; padding: 8px; border: 1px solid #ced4da; border-radius: 5px; outline: none;">
                        </div>
                    
                        <div style="flex: 1; min-width: 150px;">
                            <label for="nett_total_amount" style="font-weight: 500; display: block; margin-bottom: 5px;">Nett Total Amount</label>
                            <input type="number" id="nett_total_amount" name="nett_total_amount" value="0" readonly
                                style="width: 100%; padding: 8px; border: 1px solid #ced4da; border-radius: 5px; outline: none; background: #e9ecef;">
                        </div>
                    
                        <div style="flex: 1; min-width: 150px;">
                            <label for="multiply_price_by" style="font-weight: 500; display: block; margin-bottom: 5px;">Multiply Price By</label>
                            <div style="display: flex; align-items: center; gap: 5px;">
                                <input type="number" id="multiply_price_by" name="multiply_price_by" value="0"
                                    style="flex: 1; padding: 8px; border: 1px solid #ced4da; border-radius: 5px; outline: none;">
                            </div>
                        </div>
                      
                    </div>
                    <div style="display: flex; flex-wrap: wrap; gap: 10px; margin-top: 10px;">
                        <div style="flex: 1; min-width: 150px;">
                            <label for="actual_currency" style="font-weight: 500; display: block; margin-bottom: 5px;">Actual Currency</label>
                            <select id="actual_currency" name="actual_currency"
                                style="width: 100%; padding: 8px; border: 1px solid #ced4da; border-radius: 5px; background: white;">
                                <option value="THB">THB (Baht)</option>
                                <option value="USD">USD (Dollar)</option>
                                <option value="EUR">EUR (Euro)</option>
                            </select>
                        </div>
                    
                        <div style="flex: 1; min-width: 150px;">
                            <label for="currency_value" style="font-weight: 500; display: block; margin-bottom: 5px;">Currency Value</label>
                            <input type="number" id="currency_value" name="currency_value" value="0"
                                style="width: 100%; padding: 8px; border: 1px solid #ced4da; border-radius: 5px;">
                        </div>
                    
                        <div style="flex: 2; min-width: 300px;">
                            <label for="remarks" style="font-weight: 500; display: block; margin-bottom: 5px;">Remarks</label>
                            <input type="text" id="remarks" name="remarks"
                                style="width: 100%; padding: 8px; border: 1px solid #ced4da; border-radius: 5px;">
                        </div>
                    </div>
            
                    <!-- Buttons -->
                    <div class="button-group" style="display: flex; gap: 10px;">
                        <button type="submit" id="add" style="padding: 10px 15px; background: #2ecc71; color: white; border: none; border-radius: 5px; cursor: pointer;">Add purchase </button>
                        <button type="submit" id="save"style="padding: 10px 15px; background: #2ecc71; color: white; border: none; border-radius: 5px; cursor: pointer;">Save Changes </button>
                        <button type="button" id="cancelBtn" style="padding: 10px 15px; background: #6c5ce7; color: white; border: none; border-radius: 5px; cursor: pointer;">Back</button>
                    </div>
                </form>
            </div>
            
<!-- Add Payment View -->
<div id="addPaymentView" style="display: none;">
    <h3 style="margin-bottom: 20px; font-size: 20px; font-weight: bold;">Supplier Payments</h3>
    <form action="/addpurchasepayment" method="POST">
        <input type="hidden" id="parent_id" name="parent_id" value="">
        <!-- Supplier Selection -->
        <div class="form-group" style="display: flex; align-items: center; gap: 10px; margin-bottom: 15px;">
            <label style="width: 120px;">Supplier</label>
            <select name="suppliers" class="form-control" required style="flex: 1; padding: 8px; border: 1px solid #ccc; border-radius: 5px;">
                <option value="">Select Supplier</option>
                <% names.forEach(function(name) { %>
                    <option value="<%= name.sup_name %>"><%= name.sup_name %></option>
                <% }); %>
            </select> 
        </div>

        <div class="form-group" style="display: flex; align-items: center; gap: 10px; margin-bottom: 15px;">
            <label style="width: 120px;">Purchase Ref No</label>
            <input type="text" name="purchase_ref_no" id="purchase_ref_no" class="form-control" required style="flex: 1; padding: 8px; border: 1px solid #ccc; border-radius: 5px;">
        </div>

        <div class="form-group" style="display: flex; align-items: center; gap: 10px; margin-bottom: 15px;">
            <label style="width: 120px;">Payment Mode</label>
            <select name="payment_mode" class="form-control" required style="flex: 1; padding: 8px; border: 1px solid #ccc; border-radius: 5px;">
                <option value="">Select Payment Mode</option>
                <option value="Cash">Cash</option>
                <option value="Bank Transfer">Bank Transfer</option>
                <option value="Cheque">Cheque</option>
            </select>
        </div>

        <div id="bankSelectGroup" style="display: none;">
            <label for="bankName">Bank</label>
            <select name="bank" id="bankName" class="form-control">
              <option value="">Select Bank</option>
              <% banksData.forEach(bank => { %>
                <option value="<%= bank.bank_name %>"><%= bank.bank_name %></option>
              <% }) %>
            </select>
          </div>

        <div class="form-group" style="display: flex; align-items: center; gap: 10px; margin-bottom: 15px;">
            <label style="width: 120px;">Payment Date</label>
            <input type="date" name="payment_date" class="form-control" required style="flex: 1; padding: 8px; border: 1px solid #ccc; border-radius: 5px;">
        </div>

        <div class="form-group" style="display: flex; align-items: center; gap: 10px; margin-bottom: 15px;">
            <label style="width: 120px;">Amount</label>
            <input type="number" name="amount" class="form-control" required style="flex: 1; padding: 8px; border: 1px solid #ccc; border-radius: 5px;">
        </div>

        <div id="paymentBreakdown" style="margin-top: 10px;">
            <p><strong>Total Invoice Amount:</strong> ₹<span id="invoiceAmount">0</span></p>
            <p><strong>Amount Paid:</strong> ₹<span id="paidAmount">0</span></p>
            <p><strong>Due:</strong> ₹<span id="dueAmount">0</span></p>
          </div>

        <div class="form-group" style="display: flex; align-items: center; gap: 10px; margin-bottom: 15px;">
            <label style="width: 120px;">Remarks</label>
            <input type="text" name="remark" class="form-control" style="flex: 1; padding: 8px; border: 1px solid #ccc; border-radius: 5px;">
        </div>

        <!-- Buttons -->
        <div class="button-group" style="display: flex; gap: 10px;">
            <button type="submit" id="updatePaymentBtn" style="padding: 10px 15px; background: #2ecc71; color: white; border: none; border-radius: 5px; cursor: pointer;">save changes</button>
            <button type="submit" id="addNewPaymentBtn" style="padding: 10px 15px; background: #2ecc71; color: white; border: none; border-radius: 5px; cursor: pointer;">Add</button>
            <button type="button" id="backToPurchasesBtn" style="padding: 10px 15px; background: #6c5ce7; color: white; border: none; border-radius: 5px; cursor: pointer;">Back</button>
        </div>
    </form>
</div>

<!-- End of Add Payment View -->
                         <!-- Add Supplier Modal -->
<div id="addSupplierview" class="modal" style="display: none;">
    <div class="modal-content">
        <span class="close" id="closeModal">&times;</span>
        <h3>Add Supplier</h3>
        <form id="addSupplierForm" action="/addsupplier" method="POST">
            <div class="form-group">
                <label>Supplier Name</label>
                <input type="text" name="sup_name" class="form-control" required>
            </div>
            <div class="form-group">
                <label>Company Name</label>
                <input type="text" name="sup_comp_name" class="form-control" required>
            </div>
            <div class="form-group">
                <label>Email</label>
                <input type="email" name="sup_email" class="form-control" required>
            </div>
            <div class="form-group">
                <label>Mobile</label>
                <input type="text" name="sup_mobile" class="form-control" required>
            </div>
            <div class="form-group">
                <label>Address</label>
                <input type="text" name="sup_address" class="form-control" required>
            </div>
            <div class="form-group">
                <label>Tax Id</label>
                <input type="text" name="sup_tax_id" class="form-control" required>
            </div>
            <div class="form-group" style="border: 1px solid #ccc; padding: 10px; border-radius: 5px; display: inline-block;">
                <label>Status</label>
                <div style="display: flex; align-items: center; gap: 15px;">
                    <div style="display: flex; align-items: center; gap: 5px;">
                        <input type="radio" id="status_active" name="status" value="Active" required>
                        <label for="status_active" style="font-size: 14px; color: #333;">Active</label>
                    </div>
                    <div style="display: flex; align-items: center; gap: 5px;">
                        <input type="radio" id="status_inactive" name="status" value="Inactive" required>
                        <label for="status_inactive" style="font-size: 14px; color: #333;">Inactive</label>
                    </div>
                </div>
            </div>
            <div class="button-group">
                <button type="submit" class="btn btn-success" id="submitBtn">Add</button>
                <button type="button" id="modalcancelBtn" class="btn btn-secondary">Cancel</button>
            </div>
        </form>
    </div>
</div>

        </div>
    </main>
</div>
</div>
<script>
    console.log("🛠️ Manage Purchase script loaded!");

    // Delay execution slightly to ensure elements are available
    setTimeout(() => {
        console.log("⏳ Checking for elements...");

        function bindManagePurchaseEvents() {
            const addPBtn = document.getElementById("addPBtn");
            const cancelBtn = document.getElementById("cancelBtn");
            const addPView = document.getElementById("addpView");
            const pTableView = document.getElementById("pTableView");
            const addPurchaseForm = document.querySelector("#addpView form");
            const purchaseTableBody = document.querySelector("#pTableView tbody");
            const addSupplierBtn = document.getElementById("addsupplier"); // Button to open the modal
            const addSupplierview = document.getElementById("addSupplierview");
            const closeModal = document.getElementById("closeModal");
            const modelcancelBtn = document.getElementById("modalcancelBtn");
            const addSupplierForm = document.getElementById("addSupplierForm");

                    // Open the modal
            addSupplierBtn.addEventListener("click", function() {
                addSupplierview.style.display = "block";
            });

            // Close the modal
             closeModal.addEventListener("click", function() {
                addSupplierview.style.display = "none";
            });

            modelcancelBtn.addEventListener("click", function() {
                addSupplierview.style.display = "none";
            });



              // Handle form submission
    addSupplierForm.addEventListener("submit", async (event) => {
        event.preventDefault(); // Prevent default form submission
        const formData = new FormData(addSupplierForm);
        const urlEncodedData = new URLSearchParams(formData);

        try {
            const response = await fetch("/addsupplier", {
                method: "POST",
                headers: { "Content-Type": "application/x-www-form-urlencoded" },
                body: urlEncodedData.toString()
            });

            if (!response.ok) {
                const errorMessage = await response.text();
                alert(`Error: ${errorMessage}`);
                return;
            }

            alert("Supplier added successfully!");
            addSupplierview.style.display = "none"; // Close the modal
            await reloadManagePurchases(); // Reload the table or content
        } catch (error) {
            console.error("Error:", error);
            alert("Something went wrong.");
        }
    });

    const printButtons = document.querySelectorAll(".print-purchase");
printButtons.forEach(button => {
    button.addEventListener("click", function () {
        const purchaseId = this.getAttribute("data-id");
        console.log("Print button clicked for purchase ID:", purchaseId);

        // Redirect to the purchase invoice route with the purchase ID
        window.location.href = `/purchaseinvoice/${purchaseId}`;
    });
});

            const piecesInput = document.getElementById("pieces");
            const priceInput = document.getElementById("price");
            const taxInput = document.getElementById("tax");
            const netAmountInput = document.getElementById("net_amount");
            const nettTotalAmountInput = document.getElementById("nett_total_amount");
            const additionalChargesInput = document.getElementById("additional_charges");
            const discountPercentInput = document.getElementById("discount_percent");
            const multiplyPriceByInput = document.getElementById("multiply_price_by");
            const discountAmountInput = document.getElementById("discount_amount"); // New field for discount amount

            // Function to calculate the total net amount from all items
                function calculateTotalNetAmount() {
                    const itemRows = document.querySelectorAll('.item-details');
                    let totalNetAmount = 0;

                    itemRows.forEach(row => {
                        const netAmountInput = row.querySelector('input[name*="[netamount]"]');
                        const netAmount = parseFloat(netAmountInput.value) || 0;
                        totalNetAmount += netAmount;
                    });

                    return totalNetAmount;
                }

            // Function to calculate net amount for a specific item
            function calculateNetAmount(itemRow) {
                const piecesInput = itemRow.querySelector('input[name*="[pcs]"]');
                const priceInput = itemRow.querySelector('input[name*="[price]"]');
                const taxInput = itemRow.querySelector('input[name*="[tax]"]');
                const netAmountInput = itemRow.querySelector('input[name*="[netamount]"]');

                const pieces = parseFloat(piecesInput.value) || 0;
                const price = parseFloat(priceInput.value) || 0;
                const taxPercent = parseFloat(taxInput.value) || 0;

                // Calculate net amount
                const subtotal = pieces * price;
                const taxAmount = (taxPercent / 100) * subtotal; // Calculate tax as a percentage
                const netAmount = subtotal + taxAmount;

                netAmountInput.value = netAmount.toFixed(2);
                calculateNettTotalAmount(); // Update nett total amount whenever net amount changes
            }

            function calculateNettTotalAmount() {
            const totalNetAmount = calculateTotalNetAmount();
            const additionalCharges = parseFloat(additionalChargesInput.value) || 0;
            const discountPercent = parseFloat(discountPercentInput.value) || 0;
            const multiplyPriceBy = parseFloat(multiplyPriceByInput.value) || 1;

            // Calculate discount amount
            const discountAmount = (discountPercent / 100) * totalNetAmount;
            discountAmountInput.value = discountAmount.toFixed(2); // Update discount amount field

            // Calculate nett total amount
            const nettTotalAmount = (totalNetAmount + additionalCharges - discountAmount) * multiplyPriceBy;

            nettTotalAmountInput.value = nettTotalAmount.toFixed(2);
        }

            // Event listeners for inputs
            piecesInput.addEventListener("input", calculateNetAmount);
            priceInput.addEventListener("input", calculateNetAmount);
            taxInput.addEventListener("input", calculateNetAmount);
            additionalChargesInput.addEventListener("input", calculateNettTotalAmount);
            discountPercentInput.addEventListener("input", calculateNettTotalAmount);
            multiplyPriceByInput.addEventListener("input", calculateNettTotalAmount);

            
// Attach event listeners for the first row inputs
piecesInput.addEventListener("input", () => calculateNetAmount(addPurchaseForm.querySelector('.item-details')));
priceInput.addEventListener("input", () => calculateNetAmount(addPurchaseForm.querySelector('.item-details')));
taxInput.addEventListener("input", () => calculateNetAmount(addPurchaseForm.querySelector('.item-details')));


            // Filter Elements
            const accountFilter = document.getElementById("accountFilter");
            const dateFrom = document.getElementById("dateFrom");
            const dateUpto = document.getElementById("dateUpto");
            const searchBtn = document.getElementById("searchBtn");
            const resetBtn = document.getElementById("resetBtn");

            console.log("✅ Manage Purchase elements found, adding event listeners...");

            addPBtn.addEventListener("click", function () {
    console.log("➕ Add Purchase button clicked");
    pTableView.style.display = "none";
    addPView.style.display = "block";

       // Reset the form
    addPurchaseForm.reset();

addPurchaseForm.querySelectorAll("input[type='date']").forEach((input) => {
    const today = new Date();
    const yyyy = today.getFullYear();
    const mm = String(today.getMonth() + 1).padStart(2, '0');
    const dd = String(today.getDate()).padStart(2, '0');
    const formattedDate = `${yyyy}-${mm}-${dd}`;
    input.value = formattedDate;
});


 

    // Show only the Add button
    document.getElementById("add").style.display = "inline-block";
    document.getElementById("save").style.display = "none";

    // Set form action
    addPurchaseForm.action = "/addpurchase";
});


            // Hide Add Purchase Form and Show Purchase Table
            cancelBtn.addEventListener("click", function () {
                console.log("❌ Cancel button clicked");
                addPView.style.display = "none";
                pTableView.style.display = "block";
            });



            // ✅ Filter Purchases by Date Range
            searchBtn.addEventListener("click", function () {
                const fromDate = new Date(dateFrom.value);
                const toDate = new Date(dateUpto.value);

                if (!dateFrom.value || !dateUpto.value) {
                    alert("Please select both 'Date From' and 'Date Upto'.");
                    return;
                }

                if (fromDate > toDate) {
                    alert("'Date From' cannot be greater than 'Date Upto'.");
 return;
                }

                const rows = purchaseTableBody.querySelectorAll("tr");
                rows.forEach(row => {
                    const rowDate = new Date(row.querySelector(".purchase_date").textContent);
                    if (rowDate >= fromDate && rowDate <= toDate) {
                        row.style.display = ""; // Show the row
                    } else {
                        row.style.display = "none"; // Hide the row
                    }
                });
            });


            // Event listener for edit buttons
            document.querySelectorAll(".edit-purchase").forEach(button => {
    button.addEventListener("click", async function () {
        const purchaseId = this.getAttribute("data-id");
        console.log("Edit button clicked for purchase ID:", purchaseId);

        try {
            const purchaseResponse = await fetch(`/getPurchaseDetails/${purchaseId}`);
            if (!purchaseResponse.ok) {
                throw new Error(`Error fetching purchase details: ${purchaseResponse.status}`);
            }

            const purchaseData = await purchaseResponse.json();
            console.log("Purchase data:", purchaseData);

            populatePurchaseForm(purchaseData);

            // Show only the Save Changes button
            document.getElementById("add").style.display = "none";
            document.getElementById("save").style.display = "inline-block";

            // Set form action for update route
            addPurchaseForm.action = `/updatePurchase/${purchaseId}`;

            document.querySelector("#addpView h3").textContent = "Edit Purchase";

            pTableView.style.display = "none";
            addPView.style.display = "block";
        } catch (error) {
            console.error("Error fetching purchase details:", error);
            alert("Failed to load purchase details.");
        }
    });
});



function populatePurchaseForm(data) {
    // Populate main purchase details
    document.getElementById("purchase_id").value = data.nid; // 👈 Set hidden field

    document.querySelector('select[name="supplier"]').value = data.supplier_name; // Assuming supplier_name is the ID of the supplier
    document.querySelector('input[name="purchase_date"]').value = data.purchase_date;
    document.querySelector('input[name="due_date"]').value = data.due_date;
    document.querySelector('input[name="additional_charges"]').value = data.additional_charges;
    document.querySelector('input[name="discount_percent"]').value = data.discount_percent;
    document.querySelector('input[name="discount_amount"]').value = data.discount_amount;
    document.querySelector('input[name="exchange_rate"]').value = data.exchange_rate;
    document.querySelector('input[name="nett_total_amount"]').value = data.net_total_amt;
    document.querySelector('input[name="multiply_price_by"]').value = data.price_multiply_by;
    document.querySelector('select[name="actual_currency"]').value = data.currency; // Assuming currency is a dropdown
    document.querySelector('input[name="currency_value"]').value = data.currency_value;
    document.querySelector('input[name="remarks"]').value = data.remarks;

    // Populate item details (single item)
    const itemDetailsContainer = document.getElementById("itemDetailsContainer");
    itemDetailsContainer.innerHTML = ""; // Clear existing items

    // Create a single item row based on the data
    const itemRow = `
    <div class="item-details" style="display: flex; flex-wrap: wrap; gap: 10px; align-items: center; margin-top: 10px;">
        <div class="form-group" style="flex: 1;">
            <label>Lot No</label>
            <select name="item[0][lot_no]" class="form-control" required style="width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 5px;">
                <option value="">Select Lot No</option>
                <option value="${data.lot_no}" selected>${data.lot_no}</option> <!-- Assuming lot_no is part of the purchase data -->
            </select>
        </div>
        <div class="form-group" style="flex: 2;">
            <label>Description</label>
            <input type="text" name="item[0][description]" class="form-control" value="${data.description}" required style="width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 5px;">
        </div>
        <div class="form-group" style="flex: 1;">
            <label>Weight</label>
            <input type="text" name="item[0][weight]" class="form-control" value="${data.weight}" required style="width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 5px;">
        </div>
        <div class="form-group" style="flex: 1;">
            <label>Pieces</label>
            <input type="number" name="item[0][pcs]" class="form-control" value="${data.pcs}" required style="width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 5px;">
        </div>
        <div class="form-group" style="flex: 1;">
            <label>Price</label>
            <input type="number" name="item[0][price]" class="form-control" value="${data.price}" required style="width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 5px;">
        </div>
        <div class="form-group" style="flex: 1;">
            <label>Tax</label>
            <input type="number" name="item[0][tax]" class="form-control" value="${data.tax}" required style="width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 5px;">
        </div>
        <div class="form-group" style="flex: 1;">
            <label>Net Amount</label>
            <input type="number" name="item[0][netamount]" class="form-control" value="${data.net_amount}" required style="width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 5px;">
        </div>
    </div>
`;
itemDetailsContainer.insertAdjacentHTML("beforeend", itemRow);
}
let clickedButton = "";

document.getElementById("add").addEventListener("click", () => clickedButton = "add");
document.getElementById("save").addEventListener("click", () => clickedButton = "save");

addPurchaseForm.addEventListener("submit", async (event) => {
    event.preventDefault();

    const formData = new FormData(addPurchaseForm);
    const urlEncodedData = new URLSearchParams(formData);

    const isEdit = clickedButton === "save";
    const purchaseId = formData.get("purchase_id");
    const url = isEdit ? `/updatePurchase/${purchaseId}` : "/addpurchase";

    try {
        const response = await fetch(url, {
            method: "POST",
            headers: { "Content-Type": "application/x-www-form-urlencoded" },
            body: urlEncodedData.toString()
        });

        const responseText = await response.text(); // always read the response body

        if (!response.ok) {
            console.error("🚨 Server responded with error:", responseText);
            throw new Error(`Server error! Status: ${response.status}`);
        }

        // Try to parse JSON, fallback to raw text
        let result;
        try {
            result = JSON.parse(responseText);
        } catch {
            result = { status: "success", message: responseText };
        }

        if (result.status !== "success") {
            alert("Failed to submit form: " + (result.message || "Unknown error"));
            return;
        } 

        alert(isEdit ? "Purchase updated successfully!" : "Purchase added successfully!");
        await reloadManagePurchases();

    } catch (error) {
        console.error("Submit Error:", error);
        alert("Something went wrong while submitting the form.");
    }
});



            // ✅ Reset Filter and Show All Purchases
            resetBtn.addEventListener("click", function () {
                dateFrom.value = "";
                dateUpto.value = "";

                const rows = purchaseTableBody.querySelectorAll("tr");
                rows.forEach(row => {
                    row.style.display = ""; // Show all rows
                });
            });

            // Add More Button functionality
            let itemIndex = 1; // Start from 1 since 0 is already used

            document.getElementById("addMoreBtn").addEventListener("click", function () {
                let container = document.getElementById("itemDetailsContainer");

                let newRow = document.createElement("div");
                newRow.classList.add("item-details");
                newRow.style.display = "flex";
                newRow.style.flexWrap = "wrap";
                newRow.style.gap = "10px";
                newRow.style.alignItems = "center";
                newRow.style.marginTop = "10px";

                newRow.innerHTML = `
                    <div class="form-group" style="flex: 1;">
                        <label>Lot No</label>
                        <select name="item[${itemIndex}][lot_no]" class="form-control" required style="width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 5px;">
                            <option value="">Select Lot No</option>
                            <% lots.forEach(function(lot) { %>
                                <option value="<%= lot.lot %>"><%= lot.lot %></option>
                            <% }); %>
                        </select>
                    </div>
                    <div class="form-group" style="flex: 2;">
                        <label>Description</label>
                        <input type="text" name="item[${itemIndex}][description]" class="form-control" required style="width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 5px;">
                    </div>
                    <div class="form-group" style="flex: 1;">
                        <label>Weight Unit</label>
                        <input 
                            type="text" 
                            name="item[${itemIndex}][weight_unit]" 
                            class="form-control" 
                            value="carat" 
                            readonly 
                            style="width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 5px;"
                        >
                    </div>
                    <div class="form-group" style="flex: 1;">
                        <label>Weight</label>
                        <input type="text" name="item[${itemIndex}][weight]" class="form-control" required style="width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 5px;">
                    </div>
                    <div class="form-group" style="flex: 1;">
                        <label>Pieces</label>
                        <input type="number" name="item[${itemIndex}][pcs]" class="form-control" required style="width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 5px;">
                    </div>
                    <div class="form-group" style="flex: 1;">
                        <label>Price</label>
                        <input type="number" name="item[${itemIndex}][price]" class="form-control" required style="width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 5px;">
                    </div>
                    <div class="form-group" style="flex: 1;">
                        <label>Tax</label>
                        <input type="number" name="item[${itemIndex}][tax]" class="form-control" required style="width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 5px;">
                    </div>
                    <div class="form-group" style="flex: 1;">
                        <label>Net Amount</label>
                        <input type="number" name="item[${itemIndex}][netamount]" class="form-control" required style="width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 5px;">
                    </div>
                `;

                container.appendChild(newRow);
                 itemIndex++; // Increment the index for the next item

                // Attach event listeners to the new inputs for calculations
                const piecesInput = newRow.querySelector('input[name="item[' + (itemIndex - 1) + '][pcs]"]');
                const priceInput = newRow.querySelector('input[name="item[' + (itemIndex - 1) + '][price]"]');
                const taxInput = newRow.querySelector('input[name="item[' + (itemIndex - 1) + '][tax]"]');
                const netAmountInput = newRow.querySelector('input[name="item[' + (itemIndex - 1) + '][netamount]"]');

                function calculateNetAmount() {
                    const pieces = parseFloat(piecesInput.value) || 0;
                    const price = parseFloat(priceInput.value) || 0;
                    const taxPercent = parseFloat(taxInput.value) || 0;

                    // Calculate net amount
                    const subtotal = pieces * price;
                    const taxAmount = (taxPercent / 100) * subtotal; // Calculate tax as a percentage
                    const netAmount = subtotal + taxAmount;

                    netAmountInput.value = netAmount.toFixed(2);
                    calculateNettTotalAmount(); // Update nett total amount whenever net amount changes
                }

                // Event listeners for the new inputs
                piecesInput.addEventListener("input", calculateNetAmount);
                priceInput.addEventListener("input", calculateNetAmount);
                taxInput.addEventListener("input", calculateNetAmount);
            });

            document.getElementById("backToPurchasesBtn").addEventListener("click", function () {
                console.log("Back button clicked in payment view");
                
                // Hide the payment view
                document.getElementById("addPaymentView").style.display = "none"; // Hide Payment View
                
                // Show the purchase table
                document.getElementById("pTableView").style.display = "block"; // Show Purchase Table
            });

            // Add event listener for payment buttons
            const paymentButtons = document.querySelectorAll(".payment-purchase");
            paymentButtons.forEach(button => {
                button.addEventListener("click", async function () {
                    const purchaseId = this.getAttribute("data-id");
                    console.log("Payment button clicked for purchase ID:", purchaseId);

                    // Set the parent_id hidden input field
                    document.getElementById("parent_id").value = purchaseId; // Set the hidden input with user.nid
                    
                    // Fetch payment details based on purchaseId
                    try {
                        const response = await fetch(`/getPaymentDetails/${purchaseId}`);
                        if (!response.ok) {
                            throw new Error(`Error fetching payment details: ${response.status}`);
                        }
                        const paymentData = await response.json();
                        console.log("Payment Data:", paymentData);

                         // Always fetch and display invoice/paid/due breakdown
                        try {
                            const summaryRes = await fetch(`/getpurchaseinvoiceinfo/${purchaseId}`);
                            const summary = await summaryRes.json();

                            document.getElementById("invoiceAmount").textContent = summary.total.toFixed(2);
                            document.getElementById("paidAmount").textContent = summary.paid.toFixed(2);
                            document.getElementById("dueAmount").textContent = summary.due.toFixed(2);
                            document.getElementById("paymentBreakdown").style.display = "block";
                        } catch (err) {
                            console.error("❌ Error loading invoice info:", err);
                        }
                        // Check if paymentData has values
                        if (paymentData && paymentData.nid) {
                            // Populate the payment form with the fetched data
                            document.getElementById("parent_id").value = paymentData.parent_id; // Set hidden parent_id
                            document.querySelector('select[name="suppliers"]').value = paymentData.supplier_name; // Set supplier
                            document.querySelector('input[name="purchase_ref_no"]').value = paymentData.purchase_ref; // Set purchase ref no
                            document.querySelector('select[name="payment_mode"]').value = paymentData.payment_mode; // Set payment mode
                            document.querySelector('input[name="payment_date"]').value = paymentData.payment_date; // Set payment date
                            document.querySelector('input[name="amount"]').value = paymentData.amount; // Set amount
                            document.querySelector('input[name="remark"]').value = paymentData.remark; // Set remarks

                            // Show the populated form with Save Changes button
                            document.getElementById("addPaymentView").style.display = "block"; // Show Payment View
                            document.getElementById("addNewPaymentBtn").style.display = "none"; // Hide Add button
                            document.getElementById("updatePaymentBtn").style.display = "inline-block"; // Show Save Changes button

                            // Set form action to update route
                            document.querySelector("#addPaymentView form").action = `/updatepurchasepayment/${purchaseId}`;
                        } else {
                            // Show the blank form with Add button
                            document.getElementById("purchase_ref_no").value = purchaseId;
                            document.getElementById("addPaymentView").style.display = "block"; // Show Payment View
                            document.getElementById("addNewPaymentBtn").style.display = "inline-block"; // Show Add button
                            document.getElementById("updatePaymentBtn").style.display = "none"; // Hide Save Changes button

                            // Set form action to add route
                            document.querySelector("#addPaymentView form").action = "/addpurchasepayment";
                        }

                        // Hide the purchase table
                        document.getElementById("pTableView").style.display = "none"; // Hide Purchase Table
                    } catch (error) {
                        console.error("Error fetching payment details:", error);
                        alert("Failed to load payment details.");
                    }
                });
            });

            const exportBtn = document.getElementById("exportPurchaseExcel");
if (exportBtn) {
    exportBtn.addEventListener("click", () => {
        const table = document.querySelector("#pTableView table");

        if (!table) {
            alert("Table not found!");
            return;
        }

        const clonedTable = table.cloneNode(true);

        // Remove the Actions column
        clonedTable.querySelectorAll("thead tr th:last-child").forEach(th => th.remove());
        clonedTable.querySelectorAll("tbody tr").forEach(row => {
            row.querySelector("td:last-child")?.remove();
        });

        const workbook = XLSX.utils.table_to_book(clonedTable, { sheet: "Purchases" });
        XLSX.writeFile(workbook, "purchase_data.xlsx");
    });
}

            // Add event listener for payment form submission
            document.querySelector("#addPaymentView form").addEventListener("submit", async (event) => {
                event.preventDefault(); // Prevent default form submission
                console.log("🚀 Payment form submitted!");

                const formData = new FormData(event.target);
                const urlEncodedData = new URLSearchParams(formData);

                try {
                    const response = await fetch(event.target.action, {
                        method: "POST",
                        headers: { "Content-Type": "application/x-www-form-urlencoded" },
                        body: urlEncodedData.toString()
                    });

                    console.log("✅ Response Status:", response.status);

                    if (!response.ok) {
                        throw new Error(`Server error! Status: ${response.status}`);
                    }

                    alert("Payment details updated successfully!");
                    await reloadManagePurchases(); // Reload the page content dynamically
                } catch (error) {
                    console.error("🚨 Fetch Error:", error);
                    alert("Something went wrong while processing the payment.");
                }
            });
        }

        document.getElementById("excelUploadForm").addEventListener("submit", async function (e) {
  e.preventDefault();

  const form = e.target;
  const formData = new FormData(form);

  try {
    const response = await fetch("/uploadpurchasefile", {
      method: "POST",
      body: formData
    });

    if (response.ok) {
      // Optional: Show success message
      alert("Upload successful!");
      await reloadManagePurchases(); // Reload the page content dynamically

    } else {
      alert("Upload failed!");
    }
  } catch (error) {
    console.error("Upload Error:", error);
    alert("An error occurred during upload.");
  }
});

const paymentModeSelect = document.getElementById("payment_mode");
const bankGroup = document.getElementById("bankSelectGroup");

if (paymentModeSelect) {
  paymentModeSelect.addEventListener("change", function () {
    const selected = this.value.toLowerCase();
    if (selected === "cheque" || selected === "bank transfer") {
      bankGroup.style.display = "block";
    } else {
      bankGroup.style.display = "none";
    }
  });
}

document.querySelectorAll(".add-payment-btn").forEach(btn => {
  btn.addEventListener("click", () => {
    const purchaseId = btn.dataset.purchaseid;

    // Fill the hidden field or input for sale ref
    document.getElementById("purchase_ref_no").value = purchaseId;

    // Fetch invoice/payment summary
    fetch(`/getpurchaseinvoiceinfo/${purchaseId}`)
      .then(res => res.json())
      .then(data => {
        document.getElementById("invoiceAmount").textContent = data.total.toFixed(2);
        document.getElementById("paidAmount").textContent = data.paid.toFixed(2);
        document.getElementById("dueAmount").textContent = data.due.toFixed(2);
        document.getElementById("paymentBreakdown").style.display = "block";
      });
  });
});

// ✅ Set all date inputs to today's date by default
// Set all date inputs to today's date by default if they're empty
document.querySelectorAll("input[type='date']").forEach((input) => {
    if (!input.value) {
        const today = new Date();
        const yyyy = today.getFullYear();
        const mm = String(today.getMonth() + 1).padStart(2, '0');
        const dd = String(today.getDate()).padStart(2, '0');
        input.value = `${yyyy}-${mm}-${dd}`;
    }
});





        // ✅ Function to Reload Manage Purchases Page Without Refreshing
        async function reloadManagePurchases() {
            console.log("🔄 Reloading Manage Purchases...");
            const contentDiv = document.getElementById("dynamic-content");

            if (!contentDiv) {
                console.error("🚨 Error: #dynamic-content not found!");
                return;
            }

            const updatedContent = await fetch("/manage%20purchase");
            const html = await updatedContent.text();
            contentDiv.innerHTML = html; // Replace only the content

            bindManagePurchaseEvents(); // ✅ Rebind event listeners after reload
        }

        bindManagePurchaseEvents(); // Initial binding of events
    }, 100); // Delay of 100 milliseconds to ensure DOM is ready
</script>
</body>
</html>
