<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage Attribute</title>

    <link rel="stylesheet" href="style.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
</head>
<body>
    <div id="dynamic-content">
 <div  id="manageusers-page"  class="container-wrapper">



   
        <!-- Main Content -->
        <main class="content">
            <div class="container">
              
               

                <!-- Admin Table -->
                <div id="attributeTableView" class="table-container">
                    <h2>Manage Attributes</h2>
                    <button id="addattributeBtn" class="btn btn-primary">Add Attribute</button>
                    <br><br>
                    <table class="table">
                        <thead>
                             <tr>
                                <th>ID</th>
                                <th>Attribute Name</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% users.forEach(user => { %>
                                <tr>
                                    <td class="user-id"><%= user.nid %></td>
                                    <td class="attribute_name"><%= user.attribute_name %></td>
                                    <td class="active_status"><%= user.active_status %></td>
                                    <td>
                                        <div class="actions">
                                            <!-- Edit Button -->
                                            
                                            <button type="button" class="btn btn-warning edit-user">
                                                <i class="fa-regular fa-pen-to-square"></i>
                                            </button>
                                    
                                            <!-- Delete Button inside inline form -->
                                            <form action="/deleteattribute/<%= user.nid %>" method="POST">
                                                <button type="submit" class="btn btn-danger delete-user" data-id="<%= user.nid %>">
                                                    <i class="fa-regular fa-trash-can"></i>
                                                </button>
                                            </form>
                                        </div>
                                    </td>
                                    
                                    
                                    
                                </tr>
                            <% }); %>
                        </tbody>
                    </table>
                    <div id="pagination" class="pagination">
                        <button id="prevPage" class="btn btn-secondary">Previous</button>
                        <span id="pageInfo"></span>
                        <button id="nextPage" class="btn btn-secondary">Next</button>
                    </div>
                </div>

               <!-- Add User Form -->
               <div id="addAttributeview" style="display: none;">
                <h3>Add Attribute</h3>
                <form action="/addingattribute" method="POST">
                    <div class="form-group">
                        <label>Attribute Name</label>
                        <input type="text" name="attribute_name" class="form-control" required>
                    </div>
                    <div class="form-group" style="border: 1px solid #ccc; padding: 10px; border-radius: 5px; display: inline-block;">
                        <label >Status</label>
                        
                        <div style="display: flex; align-items: center; gap: 15px;">
                            <!-- Radio Button for Active -->
                            <div style="display: flex; align-items: center; gap: 5px;">
                                <input type="radio" id="status_active" name="status" value="Active" required>
                                <label for="status_active" style="font-size: 14px; color: #333;">Active</label>
                            </div>
                    
                            <!-- Radio Button for Inactive -->
                            <div style="display: flex; align-items: center; gap: 5px;">
                                <input type="radio" id="status_inactive" name="status" value="Inactive" required>
                                <label for="status_inactive" style="font-size: 14px; color: #333;">Inactive</label>
                            </div>
                        </div>
                    </div>
                    <div class="button-group">
                        <button type="submit" class="btn btn-success" id="submitBtn">Add </button>
                        <button type="button" id="cancelBtn" class="btn btn-secondary">Cancel</button>
                    </div>
                </form>
                </div>
                
            
             <div id="editattributeView" style="display: none;">
                <h3>Edit Attribute</h3>
                <form id="editattributeForm" action="/editattribute" method="POST">
                    <input type="hidden" name="nid" id="edit_nid"> <!-- Hidden field for user ID -->
                    <div class="form-group">
                        <label>Attribute name</label>
                        <input type="text" name="attribute_name" id="edit_attribute_name" class="form-control" required>
                    </div>
                    <div class="form-group" id="status" style="border: 1px solid #ccc; padding: 10px; border-radius: 5px; display: inline-block;">
                        <label >Status</label>
                        <div style="display: flex; align-items: center; gap: 15px;">
                            <!-- Radio Button for Active -->
                             <div style="display: flex; align-items: center; gap: 5px;">
                                <input type="radio" id="status_active" name="active_status" value="Active" required>
                            <label for="status_active">Active</label>
                             </div>
                        
                        <div  style="display: flex; align-items: center; gap: 5px;">
                            <!-- Radio Button for Inactive -->
                            <input type="radio" id="status_inactive" name="active_status" value="Inactive" required>
                            <label for="status_inactive">Inactive</label>
                        </div>
                    </div>
                        </div>
                    <div class="button-group">
                        <button type="submit" class="btn btn-success" id="saveEditBtn">Save Details</button>
                        <button type="button" id="cancelEditBtn" class="btn btn-secondary">Cancel</button>
                    </div>
                </form>
            </div>

    </main>
</div>
</div>
<script >
console.log("üõ†Ô∏è Manage Attributes script loaded!");

// Delay execution slightly to ensure elements are available
setTimeout(() => {
    console.log("‚è≥ Checking for elements...");

    function bindManageAttributesEvents() {
        const addAttributeBtn = document.getElementById("addattributeBtn"); // Changed from addHeaderBtn to addattributeBtn
        const cancelBtn = document.getElementById("cancelBtn");
        const submitBtn = document.getElementById("submitBtn");
        const addAttributeView = document.getElementById("addAttributeview"); // Changed from addHeaderView to addAttributeview
        const attributeTableView = document.getElementById("attributeTableView"); // Changed from headerTableView to attributeTableView
        const addAttributeForm = document.querySelector("#addAttributeview form"); // Changed from addHeaderForm to addAttributeForm
        const attributeTableBody = document.querySelector("#attributeTableView tbody"); // Changed from headerTableBody to attributeTableBody

        // Edit Attribute Elements
        const editAttributeView = document.getElementById("editattributeView"); // Changed from editHeaderView to editattributeView
        const editAttributeForm = document.querySelector("#editattributeView form"); // Changed from editHeaderForm to editAttributeForm
        const cancelEditBtn = document.getElementById("cancelEditBtn");

       
        if (!editAttributeView) {
            console.error("üö® #editattributeView not found in the DOM!");
        } else {
            console.log("‚úÖ #editattributeView found:", editAttributeView);
        }

        if (!addAttributeBtn || !cancelBtn || !submitBtn || !addAttributeView || !attributeTableView || !addAttributeForm || !attributeTableBody || !editAttributeView || !editAttributeForm || !cancelEditBtn) {
            console.error("‚ùå Some Manage Attribute elements are missing! DOM might not be fully loaded.");
            return;
        }

        console.log("‚úÖ Manage Attribute elements found, adding event listeners...");

        // Show Add Attribute Form and Hide Attribute Table
        addAttributeBtn.addEventListener("click", function () {
            console.log("‚ûï Add Attribute button clicked");
            attributeTableView.style.display = "none";
            addAttributeView.style.display = "block";
            editAttributeView.style.display = "none"; // Hide edit form
        });

        // Hide Add Attribute Form and Show Attribute Table
        cancelBtn.addEventListener("click", function () {
            console.log("‚ùå Cancel button clicked");
            addAttributeView.style.display = "none";
            attributeTableView.style.display = "block";
        });

        // Submit Form via AJAX and Dynamically Update Table
        addAttributeForm.addEventListener("submit", async (event) => {
            event.preventDefault(); // Prevent default form submission
            console.log("üöÄ Submit button clicked!");

            const formData = new FormData(event.target);
            const urlEncodedData = new URLSearchParams(formData);

            try {
                const response = await fetch("/addingattribute", { // Changed from /addadminheader to /addattribute
                    method: "POST",
                    headers: { "Content-Type": "application/x-www-form-urlencoded" },
                    body: urlEncodedData.toString()
                });

                console.log("‚úÖ Response Status:", response.status);

               if (response.status === 409) {
    const data = await response.json();
    alert(data.error); // Show "Attribute already exists"
    return;
}

if (!response.ok) {
    throw new Error(`Server error! Status: ${response.status}`);
}
                
                alert("Attribute added successfully!");
                await reloadManageAttributes(); // ‚úÖ Reload content dynamically
            } catch (error) {
                console.error("üö® Fetch Error:", error);
                alert("Something went wrong.");
            }
        });

       
       // ‚úÖ Edit Attribute Functionality
        document.querySelectorAll(".edit-user").forEach((editBtn) => {
        editBtn.addEventListener("click", function () {
            console.log("‚úèÔ∏è Edit button clicked!");

            const attributeRow = this.closest("tr");
            if (!attributeRow) {
                console.error("üö® Error: Cannot find attribute row.");
                return;
            }

            // Extract attribute data from table row
            const attributeId = attributeRow.querySelector(".user-id").textContent;
            const attributeName = attributeRow.querySelector(".attribute_name").textContent;
            const activeStatus = attributeRow.querySelector(".active_status").textContent.trim().toLowerCase(); // Convert to lowercase

            // Populate the edit form fields
            document.querySelector("#editattributeView input[name='nid']").value = attributeId;
            document.querySelector("#editattributeView input[name='attribute_name']").value = attributeName;
            
            const activeRadio = document.querySelector("#editattributeView input[name='active_status'][value='Active']");
const inactiveRadio = document.querySelector("#editattributeView input[name='active_status'][value='Inactive']");

console.log("Active Radio:", activeRadio);
console.log("Inactive Radio:", inactiveRadio);

if (!activeRadio || !inactiveRadio) {
    console.error("üö® Radio buttons not found!");
}
            console.log("Active Radio:", activeRadio);
            console.log("Inactive Radio:", inactiveRadio);
            // Set the correct radio button based on activeStatus
            if (activeStatus === "active") {
                document.querySelector("#editattributeView input[name='active_status'][value='Active']").checked = true;
            } else if (activeStatus === "inactive") {
                document.querySelector("#editattributeView input[name='active_status'][value='Inactive']").checked = true;
            } else {
                console.error("üö® Invalid active status:", activeStatus);
            }

            // Show Edit Attribute View & Hide Others
            attributeTableView.style.display = "none";
            addAttributeView.style.display = "none";
            editAttributeView.style.display = "block"; // Ensure this is set to "block"
        });
    });
        // ‚úÖ Handle Edit Attribute Form Submission
        editAttributeForm.addEventListener("submit", async (event) => {
            event.preventDefault();
            console.log("üíæ Save Details button clicked!");

            const formData = new FormData(event.target);
            const urlEncodedData = new URLSearchParams(formData);

            try {
                const response = await fetch("/editattribute", { // Changed from /editadminhead to /editattribute
                    method: "POST",
                    headers: { "Content-Type": "application/x-www-form-urlencoded" },
                    body: urlEncodedData.toString()
                });

                console.log("‚úÖ Edit Response Status:", response.status);

                if (!response.ok) {
                    throw new Error(`Server error! Status: ${response.status}`);
                }
                
                alert("Attribute updated successfully!");
                await reloadManageAttributes(); // ‚úÖ Reload content dynamically
            } catch (error) {
                console.error("üö® Edit Error:", error);
                alert("Failed to update attribute.");
            }
        });

        // Hide Edit Attribute View
        cancelEditBtn.addEventListener("click", function () {
            console.log("‚ùå Cancel Edit button clicked");
            editAttributeView.style.display = "none";
            attributeTableView.style.display = "block";
        });

        // ‚úÖ Delete Attribute Functionality
        document.querySelectorAll(".delete-user").forEach((deleteBtn) => {
            deleteBtn.addEventListener("click", async function (event) {
                event.preventDefault(); // Prevent page reload
                console.log("üóëÔ∏è Delete button clicked!");

                const attributeId = this.dataset.id;
                if (!attributeId) {
                    console.error("üö® Attribute ID not found in dataset!");
                    return;
                }

                if (!confirm("Are you sure you want to delete this attribute?")) return;

                try {
                    const response = await fetch(`/deleteattribute/${attributeId}`, { // Changed from /deleteadminheader to /deleteattribute
                        method: "POST",
                    });

                    console.log("üóëÔ∏è Delete Response Status:", response.status);

                    if (!response.ok) {
                        throw new Error(`Server error! Status: ${response.status}`);
                    }

                    // ‚úÖ Remove the deleted attribute's row from the table dynamically
                    const rowToDelete = this.closest("tr");
                    if (rowToDelete) {
                        rowToDelete.remove();
                        console.log(`‚úÖ Attribute ${attributeId} removed from table.`);
                    }
                } catch (error) {
                    console.error("üö® Delete Error:", error);
                    alert("Failed to delete attribute.");
                }
            });
        });
    }

    function initPagination() {
    const attributeTableView = document.getElementById("attributeTableView");
    const tableBody = attributeTableView.querySelector("tbody");
    const rows = Array.from(tableBody.querySelectorAll("tr"));

    const itemsPerPage = 10;
    let currentPage = 1;

    function getTotalPages() {
        return Math.ceil(rows.length / itemsPerPage) || 1;
    }

    function showPage(page) {
        const totalPages = getTotalPages();
        const start = (page - 1) * itemsPerPage;
        const end = start + itemsPerPage;

        rows.forEach((row, index) => {
            row.style.display = (index >= start && index < end) ? "" : "none";
        });

        document.getElementById("pageInfo").textContent = `Page ${page} of ${totalPages}`;
        document.getElementById("prevPage").disabled = (page === 1);
        document.getElementById("nextPage").disabled = (page === totalPages);
    }

    document.getElementById("prevPage").onclick = function () {
        if (currentPage > 1) {
            currentPage--;
            showPage(currentPage);
        }
    };

    document.getElementById("nextPage").onclick = function () {
        if (currentPage < getTotalPages()) {
            currentPage++;
            showPage(currentPage);
        }
    };

    showPage(currentPage);
}




    // ‚úÖ Function to Reload Manage Attributes Page Without Refreshing
    async function reloadManageAttributes() {
        console.log("üîÑ Reloading Manage Attributes...");
        const contentDiv = document.getElementById("dynamic-content");

        if (!contentDiv) {
            console.error("üö® Error: #dynamic-content not found!");
            return;
        }

        const updatedContent = await fetch("/add%20attribute"); // Changed from /adminheader to /mngattribute
        const html = await updatedContent.text();
        contentDiv.innerHTML = html; // Replace only the content

        bindManageAttributesEvents(); // ‚úÖ Rebind event listeners after reload
        initPagination(); // üîÅ reinitialize pagination
    }

    // Initial Binding of Events
    bindManageAttributesEvents();
    initPagination();

}, 500);

</script>

</body>
</html>
