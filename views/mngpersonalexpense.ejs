<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage Personal Expense</title>
    <!-- Styles -->
    <link rel="stylesheet" href="style.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>

</head>
<body>
    <div id="dynamic-content">
 <div  id="manageusers-page"  class="container-wrapper">

        <!-- Main Content -->
        <main class="content">
            <div class="container">
                <h2>Manage Personal Expense</h2>
               

                <!-- expense Table -->
                <div id="PeTableView" class="table-container">
                    <div class="filter-container" style="display: flex; align-items: center; gap: 10px; margin-bottom: 10px;">
                        <label for="dateFrom" style="font-weight: bold;">Date From</label>
                        <input type="date" id="dateFrom" class="form-control" style="padding: 5px; border: 1px solid #ccc; border-radius: 4px;">
                        
                        <label for="dateUpto" style="font-weight: bold;">Date Upto</label>
                        <input type="date" id="dateUpto" class="form-control" style="padding: 5px; border: 1px solid #ccc; border-radius: 4px;">
                        
                        <button id="searchBtn" class="btn btn-primary" style="background-color: #007bff; color: white; border: none; padding: 6px 12px; border-radius: 4px; cursor: pointer;">
                            Search
                        </button>
                        
                        <button id="resetBtn" class="btn btn-warning" style="background-color: #ffc107; color: black; border: none; padding: 6px 12px; border-radius: 4px; cursor: pointer;">
                            Reset
                        </button>
                    </div>
                
                    <br>
                    <div style="margin-bottom: 10px;">
                        <button id="exportToExcel" class="btn btn-success">Export to Excel</button>
                    </div>
                    
                    <button id="addPeBtn" class="btn btn-primary">Add Personal Expense</button>
                    <br><br>

                  

                    <table class="table">
                        <thead>
                            <tr>
                                <th>Date</th>
                                <th>Description</th>
                                <th>Amount</th>
                                <th>Remarks</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% users.forEach(user => { %>
                                <tr>
                                    <td class="date"><%= user.date %></td>
                                    <td class="description"><%= user.description %></td>
                                    <td class="amount"><%= user.amount %></td>
                                    <td class="remarks"><%= user.remarks %></td>
                                    <td>
                                        <div class="actions">
                                            <!-- Edit Button -->
                                            
                                            <button type="button" class="btn btn-warning edit-personalexpense" data-id="<%= user.nid %>">
                                                <i class="fa-regular fa-pen-to-square"></i>
                                            </button>
                                    
                                            <!-- Delete Button inside inline form -->
                                            <form action="/deletepersonalexpense/<%= user.nid %>" method="POST">
                                                <button type="submit" class="btn btn-danger delete-personalexpense" data-id="<%= user.nid %>">
                                                    <i class="fa-regular fa-trash-can"></i>
                                                </button>
                                            </form>
                                        </div>
                                    </td>
                                    
                                    
                                    
                                </tr>
                            <% }); %>
                        </tbody>
                    </table>
                    <div id="pagination" class="pagination">
                        <button id="prevPage" class="btn btn-secondary">Previous</button>
                        <span id="pageInfo"></span>
                        <button id="nextPage" class="btn btn-secondary">Next</button>
                    </div>
                </div>
                

               
               <!-- Add expense  Form -->
               <div id="addUserView" style="display: none;">
                <h3>Add New Expense</h3>
                <form action="/addpersonalexpense" method="POST">
                    <div class="form-group">
                        <label>Date</label>
                        <input type="date" name="date" class="form-control" required>
                    </div>
                    <div class="form-group">
                        <label>Description</label>
                        <input type="text" name="description" class="form-control" required>
                    </div>
                    <div class="form-group">
                        <label>Amount</label>
                        <input type="number" name="amount" class="form-control" required>
                    </div>
                    <div class="form-group">
                        <label>Remarks</label>
                        <input type="text" name="remarks" class="form-control" required>
                    </div>
                    <div class="button-group">
                        <button type="submit" class="btn btn-success" id="submitBtn">Add </button>
                        <button type="button" id="cancelBtn" class="btn btn-secondary">Cancel</button>
                    </div>
                </form>
            </div>

            <div id="editPeView" style="display: none;">
                <h3>Edit Expense</h3>
                <form id="editPeForm" action="/editpersonlexpense" method="POST">
                    <input type="hidden" name="nid" id="edit_nid"> <!-- Hidden field for user ID -->
                    <div class="form-group">
                        <label>Date</label>
                        <input type="date" name="date" id="edit_date" class="form-control" required>
                    </div>
                    <div class="form-group">
                        <label>Description</label>
                        <input type="text" name="description" id="edit_description" class="form-control">
                    </div>
                    <div class="form-group">
                        <label>Amount</label>
                        <input type="number" name="amount" id="edit_amount" class="form-control" required>
                    </div>
                    <div class="form-group">
                        <label>Remarks</label>
                        <input type="text" name="remarks" id="edit_remarks" class="form-control" required>
                    </div>
                    <div class="button-group">
                        <button type="submit" class="btn btn-success" id="saveEditBtn">Save Details</button>
                        <button type="button" id="cancelEditBtn" class="btn btn-secondary">Cancel</button>
                    </div>
                </form>
            </div>
        </div>
    </main>
</div>
</div>
<script>
    console.log("üõ†Ô∏è Manage Personal Expense script loaded!");

    // Delay execution slightly to ensure elements are available
    setTimeout(() => {
        console.log("‚è≥ Checking for elements...");

        function bindManageExpenseEvents() {
            const addPeBtn = document.getElementById("addPeBtn");
            const cancelBtn = document.getElementById("cancelBtn");
            const submitBtn = document.getElementById("submitBtn");
            const addUserView = document.getElementById("addUserView");
            const PeTableView = document.getElementById("PeTableView");
            const addExpenseForm = document.querySelector("#addUserView form");
            const expenseTableBody = document.querySelector("#PeTableView tbody");

            // Edit Expense Elements
            const editPeView = document.getElementById("editPeView");
            const editPeForm = document.querySelector("#editPeView form");
            const cancelEditBtn = document.getElementById("cancelEditBtn");

            // Filter Elements
            const dateFrom = document.getElementById("dateFrom");
            const dateUpto = document.getElementById("dateUpto");
            const searchBtn = document.getElementById("searchBtn");
            const resetBtn = document.getElementById("resetBtn");

            if (!addPeBtn || !cancelBtn || !submitBtn || !addUserView || !PeTableView || !addExpenseForm || !expenseTableBody || !editPeView || !editPeForm || !cancelEditBtn || !dateFrom || !dateUpto || !searchBtn || !resetBtn) {
                console.error("‚ùå Some Manage Expense elements are missing! DOM might not be fully loaded.");
                return;
            }

            console.log("‚úÖ Manage Expense elements found, adding event listeners...");

            // Show Add Expense Form and Hide Expense Table
            addPeBtn.addEventListener("click", function () {
                console.log("‚ûï Add Expense button clicked");
                PeTableView.style.display = "none";
                addUserView.style.display = "block";
                editPeView.style.display = "none"; // Hide edit form
            });

            // Hide Add Expense Form and Show Expense Table
            cancelBtn.addEventListener("click", function () {
                console.log("‚ùå Cancel button clicked");
                addUserView.style.display = "none";
                PeTableView.style.display = "block";
            });

            // Submit Form via AJAX and Dynamically Update Table
            addExpenseForm.addEventListener("submit", async (event) => {
                event.preventDefault(); // Prevent default form submission
                console.log("üöÄ Submit button clicked!");

                const formData = new FormData(event.target);
                const urlEncodedData = new URLSearchParams(formData);

                try {
                    const response = await fetch("/addpersonalexpense", {
                        method: "POST",
                        headers: { "Content-Type": "application/x-www-form-urlencoded" },
                        body: urlEncodedData.toString()
                    });

                    console.log("‚úÖ Response Status:", response.status);

                    if (!response.ok) {
                        throw new Error(`Server error! Status: ${response.status}`);
                    }

                    alert("Expense added successfully!");
                    await reloadManageExpense(); // ‚úÖ Reload content dynamically
                } catch (error) {
                    console.error("üö® Fetch Error:", error);
                    alert("Something went wrong.");
                }
            });

            // ‚úÖ Edit Expense Functionality
            document.querySelectorAll(".edit-personalexpense").forEach((editBtn) => {
                editBtn.addEventListener("click", function () {
                    console.log("‚úèÔ∏è Edit button clicked!");

                    const expenseRow = this.closest("tr");
                    if (!expenseRow) {
                        console.error("üö® Error: Cannot find expense row.");
                        return;
                    }

                    // Extract expense data from table row
                    const date = expenseRow.querySelector(".date").textContent;
                    const description = expenseRow.querySelector(".description").textContent;
                    const amount = expenseRow.querySelector(".amount").textContent;
                    const remarks = expenseRow.querySelector(".remarks").textContent;

                    const formattedDate = formatDateForInput(date);
                    // Populate the edit form fields
                    document.querySelector("#editPeView input[name='nid']").value = this.dataset.id;
                    document.querySelector("#editPeView input[name='date']").value = formattedDate;
                    document.querySelector("#editPeView input[name='description']").value = description;
                    document.querySelector("#editPeView input[name='amount']").value = amount;
                    document.querySelector("#editPeView input[name='remarks']").value = remarks;

                    // Show Edit Expense View & Hide Others
                    PeTableView.style.display = "none";
                    addUserView.style.display = "none";
                    editPeView.style.display = "block";
                });
            });

            const exportBtn = document.getElementById("exportToExcel");
if (exportBtn) {
    exportBtn.addEventListener("click", () => {
        const table = document.querySelector("#PeTableView table");

        if (!table) {
            alert("Table not found!");
            return;
        }

        const clonedTable = table.cloneNode(true);

        // Remove the last column (Actions)
        clonedTable.querySelectorAll("thead tr th:last-child").forEach(th => th.remove());
        clonedTable.querySelectorAll("tbody tr").forEach(row => {
            row.querySelector("td:last-child")?.remove();
        });

        const wb = XLSX.utils.table_to_book(clonedTable, { sheet: "Personal Expenses" });
        XLSX.writeFile(wb, "personal_expenses.xlsx");
    });
}


            // ‚úÖ Handle Edit Expense Form Submission
            editPeForm.addEventListener("submit", async (event) => {
                event.preventDefault();
                console.log("üíæ Save Details button clicked!");

                const formData = new FormData(event.target);
                const urlEncodedData = new URLSearchParams(formData);

                try {
                    const response = await fetch("/editpersonalexpense", {
                        method: "POST",
                        headers: { "Content-Type": "application/x-www-form-urlencoded" },
                        body: urlEncodedData.toString()
                    });

                    console.log("‚úÖ Edit Response Status:", response.status);

                    if (!response.ok) {
                        throw new Error(`Server error! Status: ${response.status}`);
                    }

                    alert("Expense updated successfully!");
                    await reloadManageExpense(); // ‚úÖ Reload content dynamically
                } catch (error) {
                    console.error("üö® Edit Error:", error);
                    alert("Failed to update expense.");
                }
            });

            // Hide Edit Expense View
            cancelEditBtn.addEventListener("click", function () {
                console.log("‚ùå Cancel Edit button clicked");
                editPeView.style.display = "none";
                PeTableView.style.display = "block";
            });

            // ‚úÖ Delete Expense Functionality
            document.querySelectorAll(".delete-personalexpense").forEach((deleteBtn) => {
                deleteBtn.addEventListener("click", async function (event) {
                    event.preventDefault(); // Prevent page reload
                    console.log("üóëÔ∏è Delete button clicked!");

                    const expenseId = this.dataset.id;
                    if (!expenseId) {
                        console.error("üö® Expense ID not found in dataset!");
                        return;
                    }

                    if (!confirm("Are you sure you want to delete this expense?")) return;

                    try {
                        const response = await fetch(`/deletepersonalexpense/${expenseId}`, {
                            method: "POST",
                        });

                        console.log("üóëÔ∏è Delete Response Status:", response.status);

                        if (!response.ok) {
                            throw new Error(`Server error! Status: ${response.status}`);
                        }

                        // ‚úÖ Remove the deleted expense's row from the table dynamically
                        const rowToDelete = this.closest("tr");
                        if (rowToDelete) {
                            rowToDelete.remove();
                            console.log(`‚úÖ Expense ${expenseId} removed from table.`);
                        }
                    } catch (error) {
                        console.error("üö® Delete Error:", error);
                        alert("Failed to delete expense.");
                    }
                });
            });

            // ‚úÖ Filter Expenses by Date Range
            searchBtn.addEventListener("click", function () {
                const fromDate = new Date(dateFrom.value);
                const toDate = new Date(dateUpto.value);

                if (!dateFrom.value || !dateUpto.value) {
                    alert("Please select both 'Date From' and 'Date Upto'.");
                    return;
                }

                if (fromDate > toDate) {
                    alert("'Date From' cannot be greater than 'Date Upto'.");
                    return;
                }

                const rows = expenseTableBody.querySelectorAll("tr");
                rows.forEach(row => {
                    const rowDate = new Date(row.querySelector(".date").textContent);
                    if (rowDate >= fromDate && rowDate <= toDate) {
                        row.style.display = ""; // Show the row
                    } else {
                        row.style.display = "none"; // Hide the row
                    }
                });
            });

            // ‚úÖ Reset Filter and Show All Expenses
            resetBtn.addEventListener("click", function () {
                dateFrom.value = "";
                dateUpto.value = "";

                const rows = expenseTableBody.querySelectorAll("tr");
                rows.forEach(row => {
                    row.style.display = ""; // Show all rows
                });
            });
        }

        // ‚úÖ Set all date inputs to today's date by default
document.querySelectorAll("input[type='date']").forEach((input) => {
    const today = new Date();
    const yyyy = today.getFullYear();
    const mm = String(today.getMonth() + 1).padStart(2, '0'); // Months start at 0
    const dd = String(today.getDate()).padStart(2, '0');
    const formattedDate = `${yyyy}-${mm}-${dd}`;

    // Set value only if not already populated (e.g., in edit form)
    if (!input.value) {
        input.value = formattedDate;
    }
});


        // ‚úÖ Function to Reload Manage Expense Page Without Refreshing
        async function reloadManageExpense() {
            console.log("üîÑ Reloading Manage Expense...");
            const contentDiv = document.getElementById("dynamic-content");

            if (!contentDiv) {
                console.error("üö® Error: #dynamic-content not found!");
                return;
            }

            const updatedContent = await fetch("/personalexpense");
            const html = await updatedContent.text();
            contentDiv.innerHTML = html; // Replace only the content

            bindManageExpenseEvents(); // ‚úÖ Rebind event listeners after reload
        }

        // Initial Binding of Events
        bindManageExpenseEvents();
    }, 500);

    // Function to format date for input
    function formatDateForInput(dateString) {
        // If the date is already in YYYY-MM-DD format, return it as is
        if (/^\d{4}-\d{2}-\d{2}$/.test(dateString)) {
            return dateString;
        }

        // If the date is in DD/MM/YYYY format, convert it to YYYY-MM-DD
        if (/^\d{2}\/\d{2}\/\d{4}$/.test(dateString)) {
            const [day, month, year] = dateString.split("/");
            return `${year}-${month}-${day}`;
        }

        // If the date is in MM/DD/YYYY format, convert it to YYYY-MM-DD
        if (/^\d{2}\/\d{2}\/\d{4}$/.test(dateString)) {
            const [month, day, year] = dateString.split("/");
            return `${year}-${month}-${day}`;
        }

        // If the date is in another format, log an error and return an empty string
        console.error("üö® Unsupported date format:", dateString);
        return "";
    }
</script>
</body>
</html>
